11/11/11: - began coding
          - circle syntax decided as map {:fn f :args '(a b c)}
          - eval-circle written
          - read-qset written
14/11/11: - began fixing eval-circle to accept circles as args
          - eval-circle needs to be recursive:-
            = e.g. (def c0 = {:fn + :args 3 7})
                   (def c1 = {:fn * :args c0 2})
                   (eval-circle c0) => (eval (+ 3 7)) => 10
                   (eval-circle c1) => (eval (* (+ 3 7) 2)) => 20
            = so (eval-circle c1) does this:-
	      # initialise expr => ()
	      # cons (:fn c1) => (*)
	      # look at first arg
	      # c0 is not a number so recur
	      # intialise expr => (* ())
	      # cons (:fn c0) => (* (+))
	      # look at first arg
	      # 3 is a number so cons => (* (+ 3))
	      # look at second arg
	      # 7 is a number so cons => (* (+ 3 7))
	      # back up a level
	      # 2 is a number so cons => (* (+ 3 7) 2)
	      # out of args so eval => (eval (* (+ 3 7) 2)) => 20
          - display for generated code?
	  - not finding clojure.string on netbook?
22/11/11: - wrote fn circ-arg that creates list from circle arg or returns int arg
24/11/11: - wrote fn parse-args to parse output of circ-arg to desconstruct circles
          - currently broken; need function to perform as follows:-
            = begin with input and '()
            = check first arg:-
              # is input '()?  if so, done.  if not, continue
              # if first element is circle, parse-args and cons sublist to output
              # if not circle, cons to output
              # recur with rest of list
05/12/11: - began writing recursive version of parse-args
          - ditching circ-arg, writing parse-circ to conflate circ-arg and parse-args
          - ditching circles as maps, will use lists, starting on gui
          - cba to fight jfx2 anymore so using guiftw/swt again
          - ditched circle maps stuff, currently draws just a blank canvas
          - added "new" and "delete" buttons
          - added "split" button
          - sorted gridlayout, canvas with 3 buttons below it
          - added dummy fns for new, split and del
06/12/11: - began work on gen-circle fn to generate an agent representing each circle
          - added doc strings
          - decided gen-circle would be better as a macro defcircle
          - wrote defcircle, creates an agent containing a list representing the function
          - need to rewrite defcircle to check if an arg is an agent and deref it
          - added agent? to check if arg is an agent
          - added make-vals to take a mixed list of ints and agents and return a list of ints and agents derefed
          - for some reason (first l) returns the symbol; calling eval on it seems to work to get the agents out of the list
          - defcircle *nearly* works but is evaling circles and not updating, rather than adding lists and changing with edits to dependant circles
          - dodgy quoting in defcircle, sort it out
07/12/11: - working on defcircle again, trying macroexpand et al.
          - figured don't actually need circles as agents, can just redefine on modification so working on a new defcircle to gen lists
          - got a nesting defcircle using lists now,  just need to make it use symbols rather than the list the symbol resolves to; need a fn to iterate across a list and quote the symbols
          - sorted defcircle, need a fn to iteratively eval elements of a circle sexp
          - turned out didn't need a fn to quote symbols in a list as they are by default symbols when accessed from a list
          - wrote framework for eval-circle, need to figure out what goes in place of "something" and "something else"
          - writing fn nested? to check if circle contains other circles
          - wrote rough version of eval-circle using nested? for a base case
08/12/11: - nested? is checking if circle fns and non-circle args are nested, adding check for that
          - nested? fixed, eval-circle currently unable to eval several-deep nests; first circle it encounters it returns
          - i might just have cracked this eval-circle bastard! seems to be working, need to test with very nested circles but seems ok for now! :D
          - it even works if you redefine a dependency! :O
          - tidied up comments, sorted dodgy def docs
09/12/11: - started dicking about trying to draw circles
10/12/11: - added used-coords agent to keep track of where circles can be drawn
          - imported PaintListener and PaintEvent
          - imported Image and GC
          - imported Device and Display
          - defined circle images
          - working on fn get-circ-bounds to get bounding box for each circle graphic
          - need to sort circle structure; thinking of a map like {:x x :y y :img img-cn :circ '(fn arg1 arg2 & args)}
          - defined circx and circy as width and height of circle images
          - modding defcircle to make a map as above
          - defined canvx and canvy as width and height of the canvas
          - defcircle map gens random :x and :y within canvas bounds and sets :img-circ to img-cn, getting n by counting args
          - defcircle :circ is as before
          - need to fix eval-circle to account for new map stuff
          - defcircle now resolves img-cn correctly
          - eval-circle is broken, need to fix to deal with maps
11/12/11: - eval-circle is evaluating nested circles to maps, need to make it use :circ not the whole map
          - added fn init-repl to save time experimenting in the repl
14/12/11: - added circle defs as comments to eval in emacs to speed things up a bit
          - fixed nested? to work with map structure
          - eval-circle works again with 1-deep nests, fixing for multiple levels
          - eval-circle fixed to work with maps of arbitrary depth! :D
          - rename defcircle to defcircle-map, working on a fn defcircle to call defcircle-map and add its :x and :y components to the used-coords agent
          - added fn xy-rng to generate random map {:x x :y y} and push the list '(x y) to used-coords
          - updated swank to v1.3.4 so agents actually work now
          - removed defcircle and moved defcircle-map back to defcircle
          - defcircle now uses xy-rng to update used-coords when defing circles
          - added draw-circle to eliminate some future cruft
          - renamed :img-circ to :img
          - need to add creation dialogue to new-circle
15/12/11: - dialogue can use org.eclipse.swt.widgets.Spinner
          - removed get-circ-bounds
16/12/11: - imported Spinner and Dialog, wrote some comments, bit stuck atm :(
18/12/11: - added spinner, decided to ditch the dialogue for now and just have it on the main window
          - began writing spinner-parsing stuff into new-circle, thinking it needs to change to defcircle a new dircle then display it, poss. a dialogue box to determine arguments (for now at least)
          - finally figured out how to access spinner values and other in-gui stuff, embarrassing
          - thinking of possibly writing a letcircle macro to let circles at runtime, rather than fiddling with defcircle
          - draw-circle seems to be working but mysteriously not drawing anything on the canvas
          - playing around with paintControl in actions for :circle-area, still nowt on the canvas
          - images definitely working as able to draw on button
03/01/12: - sick of fighting swt, switching to swing/seesaw, see if that works
          - removing init-repl as so swt-dependent it's now pointless
          - images now of type java.awt.image.BufferedImage
          - old swt crap now in huge comment at the bottom
          - mostly migrated to seesaw/swing, need to add actions for buttons
04/01/12: - put buttons in column instead of line
          - sorted out listeners; buttons now do alerts as placeholders
          - added new-circle and edit-circle to draw and edit circles getting info from dialogues
          - added string-to-int-list to parse use input from dialogues (for now)
          - dialogues for now taking defcircle arg strings, appending "defcircle" and evaling
          - removed old swt crap now that fully migrated to seesaw/swing
          - maybe have another agent with used circle names?
05/01/12: - removed println from new- and edit-circle
          - canvas bg now white
          - main-window changed to a def rather than a defn so now selectable
          - -main fn changed accordingly
          - for some reason .getGraphics is returning a SunGraphics2D (which seesaw can't use) rather than a Graphics2D (which it can) - casting to a Graphics or a Graphics2D still gives a SunGraphics2D, seems to be some kind of jvm internal type, maybe sth to do with how clojure works?
          - using .drawOval to draw directly on the SunGraphics2D now as seesaw is being weird
          - need to figure out how to fill circles, delete circles, add labels
          - removing :img field from defcircle as well as loaded images as now drawing manually
          - adding :name field to defcircle to make labelling onscreen easier
          - draw-circle now labelling circles with names and ops
          - writing fn clear-screen to paint a white rectangle over the whole canvas
          - circle-drawing now limited - 15px-thick border between canvas edge and allowed drawing space, which clear-screen clears
          - tidied up some crap, removed commented-out sections
          - added working clear button to window using the clear-screen fn
          - tried tidying-up canvas and border by putting it in an xyz-panel but failed, put back
          - draw-circle now prints the list of args above the circle, need to sort so that it prints around the circle
          - should probably add random colour generator to defcircle, maybe a field :colour
06/01/12: - used-coords now used-circles
          - xy-rng no longer sends off xy maps to used-coords, will change defcircle to send whole circles off to used-circles, can grab :x and :y data from those if needed
          - in fact, removing xy-rng altogether as can incorporate into defcircle
          - defcircle now sends off a symbol pointing to the new circle to used-circles
          - wrote a fn render that redraws all active circles, added a button for it
          - defcircle not actually defining circles, only sending off a symbol corresponding to name to used-circles
          - defcircle fixed, now sends off the symbol pointing to the new circle to used-circles
          - added fn del-circle to remove circles from used-circles, works
          - rewriting new-circle to define a new circle and draw it
          - new-circle for some reason not sending circles off to used-circles
          - buttons mysteriously executing without complaint but not actually doing anything; maybe all in seperate thread/namespace?
07/01/12: - thinking of ditching defcircle and just keeping the used-circles agent, maybe incorporate into new-circle?
          - rewriting new-circle as a macro that creates the circle map, sends it off to used-circles and draws it - used-circles will now be used as a list of maps rather than symbols
          - added fn find-circle to select circles by name from used-circles for when it contains maps rather than symbols
          - adding fn build-circle-expr to de-nest circles
          - or not, because that's a stupid idea - need to have symbols or similar in case nested circles change
          - fixed new-circle so that the actual fn is used in :circ rather than the symbol (i.e. the fn + as opposed to '+)
          - added fn kill-used-circles to empty used-circles to save time debugging
          - rewrote edit-circle so it now removes old circle and re-adds new one with new expression in :circ field
          - added ability to supply an argument to del-circle without using input box so that edit-circle now works properly
08/01/12: - fixed nested? fn to work with new circles (takes a map arg, use in conjunction with find-circle)
          - eval-circle fixed to work with new circles
          - render now draws current totals of all active circles
          - adding fn link-circles to (for now) draw a line/arrow between circles where there is a circle arg (will later make a triangle or sth nicer but a line/arrow is fine for now)
          - done, incorporated into render
          - adding fn count-nested to see how nested circles are, will use to determine colour
          - link-circles now incorporated into draw-circle, removed from render
          - not working, will come back to later
          - java.awt.event.MouseEvent has methods getX() and getY() to get mouse co-ords relative to component, will be useful
          - need fns to get mouse co-ords on click, to check if co-ords within bounds of a circle and to stop circles overlapping
          - adding fn in-circle to check if supplied co-ords are within a circle and returns circle name as a string, nil otherwise
          - in-circle sorted
          - fixing new-circle to check if circles overlap and place them such that they stay onscreen
          - changed in-circle to now take an int and a bool, checks if int is within x range of a circle if the bool is true (y range if false)
          - added fn in-circle? as a wrapper to in-circle, works the same but returns true if in a circle, false otherwise
          - added fn available? as a wrapper to in-circle?, works the same but accounts for if that would be going off-screen or over another circle
          - reintroducing xy-rng to generate a pair of available co-ords using available?; this is now used in new-circle
          - new-circle not not-overlapping, blaming xy-rng, can't see why atm
09/01/12: - xy-rng was only generating unavailable co-ords!  forgot to take out the (not) around the available? predicates *facepalm*
          - increasing font size on canvas, will wok on showing/checking questions next
          - need a fn choose-qset to choose a file containing a set of questions, the others to iterate through and mark answers
          - therefore need a function to check which is the root circle; need to finish count-nested
          - main-window now used border-panel to display shit properly
          - thinking of reading the qset into an agent, could give qs a :correct? field to automate marking/show totals?
          - added agent current-qset that holds a list of questions from a .nqs file
          - added fns load-qset (loads .nqs file and sends off to current-qset) and kill-current-qset (empties current-qset)
          - reversing order of circle rendering so that root rather than leaves is on top
          - meh, looks worse, putting it back
          - new-circle warns that non-existent circle args don't exist but still lets you use them
          - actually, that's good: if you then define the circles you pre-declared it links them up properly, needs a bit of polish though
          - added next q and prev q buttons, dummy fns returning nil for now
          - next and prev buttons now just grab the first question
          - now displays first q properly on opening app
          - changing read-qset to read qs into a list of maps
          - question format is (for now) {:n question-number :q question :a? answered? :c? correct?}
          - qset file just a list of sexps atm
          - closing file dialogue just gives you a blank canvas to play with, need to decide if want or not, probs do but should formalise it rather than just closing the dialogue
          - put dummy fns for next and prev back in, open now does the string manipulation properly (also its :id has changed from :qset to :open)
          - question bit was printing "(quote <q>)" so now using (first (rest (:q (first @current-qset)))) to just get the maths bit
          - adding area for current total, will have to leave inactive until root-finding fn is done
          - thinking of having font red until total is correct (turns green)
10/01/12: - added fn point-in-circle, has original functionality of in-circle (i.e. takes two co-ords)
          - starting working on dnd stuff, writing fn drag-circle-begin to get co-ords of click, check if in circle and send off to new agent currently-dragging-circle
          - will next write fn drag-circle-end to send off nil to currently-dragging-circle, mod the :x and :y fields of the circle and re-render (not in that order)
          - added agent current-question to keep track of question number
          - dnd basically works, has trouble with leaf circles though, will come back to
          - count-nested might be easier to do backwards, i.e. count how many steps before hitting a root (i.e. one with no symbols)
          - so will check no. of symbols in each circle reached, somehow keep a record of all possible paths?
          - clojure tree library/ies?  recursively build a tree?
11/01/12: - wrote fn leaf? to check if circle contains any others as args
          - wrote fn nested-circles to return a list of strings corresponding to the circles used as arguments to the input circle
          - thinking should maybe have a fn that compares two paths, might need to trampoline?
          - no, that's stupid, will just have a list of lists
          - maybe just see if any paths lead to a leaf and return?  maybe a fn find-longest-path?
          - maybe find root by checking circle name against other circles' args, then work from root?
          - doing this now: writing fns is-arg? to check if circle is in another circle and root? to use this to see if circle is a root
          - root? works, writing fn find-root to iterate through used-circles and find the root circle
          - find-root works, now able to evaluate whole trees!
          - sorted out answer diaplying result, marking result - and in under 300ms (from pressing eval button)!
          - success criterion fulfilled! w00t!!1 :D :D
          - edit-circle fixed to re-link circles properly
          - getting NullPointerException when dnding non-root circle
          - can use :popup property of canvas to define context menus (JPopupMenu), probs better than buttons for circle operations
          - writing todo list now in ./TODO
          - wrote fn check-answer to replace cruft in main-window
          - made new, edit and remove check the answer after rendering
          - failed at splash screen by just setting manifest options, not important, will come back to
          - answer now live-updating, could probs remove eval button now
12/01/12: - check-answer now pops up with an alert telling you when you get it right, then calls next-question (which needs to be written)
          - writing fn get-q-no to get a question given its :n value
          - wrote fn next-question to update current-question and load it
          - adding fns question-right and question-wrong to execute on checking answer
          - fixed load-qset, now kills circles, resets current-question, resets answer, re-renders
          - removed new and prev buttons as pointless
          - removed some cruft in the listener for the open button
          - added fn load-qset-init for use in initialisation in -main
          - removed old version of check-answer, new one now used question-right and question-wrong
          - next-question and all that shit works, need to write a bit to deal with end of qset
          - done, now asks user for a new qset on completion
          - began writing fn lisp-to-maths to make questions readable
          - that works, incorporating into question display
          - putting into load-qset, next-question, -main
15/01/12: - adding fn canvas-selected to do popups depending on if an existing circle is selected; if canvas is clicked not on a circle, eval (new-circle), else bring up a popup with options for (edit-circle) and (del-circle)
          - popup sort of working but for some reason doesn't bring up a menu, just executes the first action, namely (edit-circle)
          - turns out popup requires a vector of actions not fns/labels, have corrected but same problem for some reason
          - have defined three actions: new-, edit- and del-circle-action, to use in menus (might help?)
17/01/12: - working on popups but still for some reason executing first item on menu - tried not using canvas-selected and just giving :popup a vector of actions but no joy
          - turns out you're not supposed to put brackets around the :handler fns in actions :$ - now working, need to make it work on circles selected, i.e. (edit-circle) becomes (edit-circle circ) where circ is the circle that was right-clicked
          - also need to make it so that it doesn't think you're dragging when you right click, as currently trying to drag even when a circle doesn't exist
18/01/12: - disabling dragging listeners for now, just until popups work
          - popups seem to work but not evaluating after creating
          - getting "circle not found" with popup editing
          - popup remove circle doesn't do anything, no exceptions though :\
          - new button doesn't work (NullPointerException), but edit and remove buttons still work
          - turns out some kind of arg is being passed to edit-circle (and presumably del-circle), guessing the event?  will experiment
          - looks like a java.awt.event.ActionEvent is being passed to it, annoyingly can't .getX and things like that with it so will keep looking
          - changing edit-circle and del-circle to check if arg is an ActionEvent or a String, currently trying to use .getX and .getY though i know they don't work with ActionEvents, looking into it
          - maybe have a couple of agents for current co-ordinates on click?
          - added agent current-click to keep co-ords on clicking
          - changed new-circle to put circles at the current co-ords in current-click
19/01/12: - made popup new work, now puts circles where the mouse is - edit still getting a NullPointerException
          - wtf, del-circle seems to work fine other than in a popup menu :\ loop generates the right resultant list, just crashes used-circles with a NullPointerException in a popup context
          - right, so del-circle wasn't working because the circle didn't exist yet; works if you (render) between making and deleting the circle
          - edit now getting an IllegalArgumentException, saying that 1 is the wrong number of args to be passing
          - need, however, to sort out the fact that it's now only changing the answer on the next circle op, not even on the next render
          - thinking now maybe losing edit-circle and these context menus and just having it so that clicking on blank makes a circle, clicking on a circle deletes that circle - alex suggests a delete confirmation dialogue but not sure about that, will have to see how it feels
          - coming back to that later, moving on to making the new-circle dialogue usable for now
          - adding a fn new-dialogue for the new-circle dialogue
          - changing new-dialogue from a fn to a def of a frame, like main-window
          - added fn fn-to-maths to take an operation and output its proper unicode symbol
          - removing fn-to-maths as pointless
21/01/12: - working on redoing new dialogue
          - currently have a listbox and a load of radio buttons, need to add listeners for which radio buttons are selected - thinking sliders for numbers, listboxes for circles
          - replacing ops listbox with radio buttons
          - redoing all this shit, now got radios for ops, checks and sliders for 8 number args, checks for circle args
          - right, got a nicer-looking dialogue now, need to write a fn to populate the circle args bit at the bottom now
          - writing a fn gen-circ-checks to do that
          - seems to work, now have a load of checkboxes at the bottom of the dialogue, just need to connect it all up with listeners and shit now :)
22/01/12: - added text field for circle name to new-circle dialogue
          - removing "available" from border/title of circles section of new-circle dialogue
          - feeling like may encounter problems with new-circle dialogue, make sure that (gen-circ-checks) is run every time it's opened
          - writing fn get-circ-params to get info from new-dialogue; for now will generate a map with just :name and :circ, then new-circle will add :x and :y fields
          - realised that circ bit at the bottom can't work thanks to non-commutative - and / (fuck 'em); now going to do (gen-circ-checks) for each arg, also going to mod gen-circ-checks to take an arg to use as a prefix to the generated ids
          - changing get-circ-checks to get-circ-radios as no longer makes sense to have checkboxes
          - now thinking needs an arg check, a num/circ radio, a num slider and circ radios
          - oops, forgot to make gen-circ-radios put the radios into a horizontal-panel *facepalm* done now
          - right, new layout now working but weird amounts of whitespace around left columns
          - also, mixed up left and right ffs
          - redone new-dialogue AGAIN, working mostly how i want it to now but placement of some objects dodgy, may well put things into a vertical-panel of horizontal-panels rather than the border-panel i have now to align them properly; need to sort out new-dialogue layour fully before finishing get-circ-params
23/01/12: - writing fn new-arg-panel to simplify the layout of new-dialogue, sick of killing/yanking so much boilerplate
          - works!  so far anyway, need to test with circles
          - works with circles :)
          - making new-dialogue a fn to regenerate circs, etc., each time new-circle gets run
          - works! :D getting a wrong no. of args error for invoke-later in test-new-box though :\
          - redoing get-circ-params, major rework of old fn
          - written, weird error about get-meta though, guessing the :id property is a metadatum?
25/01/12: - think the get-meta error is because new-dialogue is now a defn and not a def
          - changing it back to a def, will write a fn to re-eval it to get new circs, etc.
          - that worked, now able to select stuff but getting a weird error about using an Integer as an ISeq on line 483 :S