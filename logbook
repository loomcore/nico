11/11/11: - began coding
          - circle syntax decided as map {:fn f :args '(a b c)}
          - eval-circle written
          - read-qset written
14/11/11: - began fixing eval-circle to accept circles as args
          - eval-circle needs to be recursive:-
            = e.g. (def c0 = {:fn + :args 3 7})
                   (def c1 = {:fn * :args c0 2})
                   (eval-circle c0) => (eval (+ 3 7)) => 10
                   (eval-circle c1) => (eval (* (+ 3 7) 2)) => 20
            = so (eval-circle c1) does this:-
              # initialise expr => ()
              # cons (:fn c1) => (*)
              # look at first arg
              # c0 is not a number so recur
              # intialise expr => (* ())
              # cons (:fn c0) => (* (+))
              # look at first arg
              # 3 is a number so cons => (* (+ 3))
              # look at second arg
              # 7 is a number so cons => (* (+ 3 7))
              # back up a level
              # 2 is a number so cons => (* (+ 3 7) 2)
              # out of args so eval => (eval (* (+ 3 7) 2)) => 20
          - display for generated code?
          - not finding clojure.string on netbook?
22/11/11: - wrote fn circ-arg that creates list from circle arg or returns int arg
24/11/11: - wrote fn parse-args to parse output of circ-arg to desconstruct circles
          - currently broken; need function to perform as follows:-
            = begin with input and '()
            = check first arg:-
              # is input '()?  if so, done.  if not, continue
              # if first element is circle, parse-args and cons sublist to output
              # if not circle, cons to output
              # recur with rest of list
05/12/11: - began writing recursive version of parse-args
          - ditching circ-arg, writing parse-circ to conflate circ-arg and parse-args
          - ditching circles as maps, will use lists, starting on gui
          - cba to fight jfx2 anymore so using guiftw/swt again
          - ditched circle maps stuff, currently draws just a blank canvas
          - added "new" and "delete" buttons
          - added "split" button
          - sorted gridlayout, canvas with 3 buttons below it
          - added dummy fns for new, split and del
06/12/11: - began work on gen-circle fn to generate an agent representing each circle
          - added doc strings
          - decided gen-circle would be better as a macro defcircle
          - wrote defcircle, creates an agent containing a list representing the function
          - need to rewrite defcircle to check if an arg is an agent and deref it
          - added agent? to check if arg is an agent
          - added make-vals to take a mixed list of ints and agents and return a list of ints and agents derefed
          - for some reason (first l) returns the symbol; calling eval on it seems to work to get the agents out of the list
          - defcircle *nearly* works but is evaling circles and not updating, rather than adding lists and changing with edits to dependant circles
          - dodgy quoting in defcircle, sort it out
07/12/11: - working on defcircle again, trying macroexpand et al.
          - figured don't actually need circles as agents, can just redefine on modification so working on a new defcircle to gen lists
          - got a nesting defcircle using lists now,  just need to make it use symbols rather than the list the symbol resolves to; need a fn to iterate across a list and quote the symbols
          - sorted defcircle, need a fn to iteratively eval elements of a circle sexp
          - turned out didn't need a fn to quote symbols in a list as they are by default symbols when accessed from a list
          - wrote framework for eval-circle, need to figure out what goes in place of "something" and "something else"
          - writing fn nested? to check if circle contains other circles
          - wrote rough version of eval-circle using nested? for a base case
08/12/11: - nested? is checking if circle fns and non-circle args are nested, adding check for that
          - nested? fixed, eval-circle currently unable to eval several-deep nests; first circle it encounters it returns
          - i might just have cracked this eval-circle bastard! seems to be working, need to test with very nested circles but seems ok for now! :D
          - it even works if you redefine a dependency! :O
          - tidied up comments, sorted dodgy def docs
09/12/11: - started dicking about trying to draw circles
10/12/11: - added used-coords agent to keep track of where circles can be drawn
          - imported PaintListener and PaintEvent
          - imported Image and GC
          - imported Device and Display
          - defined circle images
          - working on fn get-circ-bounds to get bounding box for each circle graphic
          - need to sort circle structure; thinking of a map like {:x x :y y :img img-cn :circ '(fn arg1 arg2 & args)}
          - defined circx and circy as width and height of circle images
          - modding defcircle to make a map as above
          - defined canvx and canvy as width and height of the canvas
          - defcircle map gens random :x and :y within canvas bounds and sets :img-circ to img-cn, getting n by counting args
          - defcircle :circ is as before
          - need to fix eval-circle to account for new map stuff
          - defcircle now resolves img-cn correctly
          - eval-circle is broken, need to fix to deal with maps
11/12/11: - eval-circle is evaluating nested circles to maps, need to make it use :circ not the whole map
          - added fn init-repl to save time experimenting in the repl
14/12/11: - added circle defs as comments to eval in emacs to speed things up a bit
          - fixed nested? to work with map structure
          - eval-circle works again with 1-deep nests, fixing for multiple levels
          - eval-circle fixed to work with maps of arbitrary depth! :D
          - rename defcircle to defcircle-map, working on a fn defcircle to call defcircle-map and add its :x and :y components to the used-coords agent
          - added fn xy-rng to generate random map {:x x :y y} and push the list '(x y) to used-coords
          - updated swank to v1.3.4 so agents actually work now
          - removed defcircle and moved defcircle-map back to defcircle
          - defcircle now uses xy-rng to update used-coords when defing circles
          - added draw-circle to eliminate some future cruft
          - renamed :img-circ to :img
          - need to add creation dialogue to new-circle
15/12/11: - dialogue can use org.eclipse.swt.widgets.Spinner
          - removed get-circ-bounds
16/12/11: - imported Spinner and Dialog, wrote some comments, bit stuck atm :(
18/12/11: - added spinner, decided to ditch the dialogue for now and just have it on the main window
          - began writing spinner-parsing stuff into new-circle, thinking it needs to change to defcircle a new dircle then display it, poss. a dialogue box to determine arguments (for now at least)
          - finally figured out how to access spinner values and other in-gui stuff, embarrassing
          - thinking of possibly writing a letcircle macro to let circles at runtime, rather than fiddling with defcircle
          - draw-circle seems to be working but mysteriously not drawing anything on the canvas
          - playing around with paintControl in actions for :circle-area, still nowt on the canvas
          - images definitely working as able to draw on button
03/01/12: - sick of fighting swt, switching to swing/seesaw, see if that works
          - removing init-repl as so swt-dependent it's now pointless
          - images now of type java.awt.image.BufferedImage
          - old swt crap now in huge comment at the bottom
          - mostly migrated to seesaw/swing, need to add actions for buttons
04/01/12: - put buttons in column instead of line
          - sorted out listeners; buttons now do alerts as placeholders
          - added new-circle and edit-circle to draw and edit circles getting info from dialogues
          - added string-to-int-list to parse use input from dialogues (for now)
          - dialogues for now taking defcircle arg strings, appending "defcircle" and evaling
          - removed old swt crap now that fully migrated to seesaw/swing
          - maybe have another agent with used circle names?
05/01/12: - removed println from new- and edit-circle
          - canvas bg now white
          - main-window changed to a def rather than a defn so now selectable
          - -main fn changed accordingly
          - for some reason .getGraphics is returning a SunGraphics2D (which seesaw can't use) rather than a Graphics2D (which it can) - casting to a Graphics or a Graphics2D still gives a SunGraphics2D, seems to be some kind of jvm internal type, maybe sth to do with how clojure works?
          - using .drawOval to draw directly on the SunGraphics2D now as seesaw is being weird
          - need to figure out how to fill circles, delete circles, add labels
          - removing :img field from defcircle as well as loaded images as now drawing manually
          - adding :name field to defcircle to make labelling onscreen easier
          - draw-circle now labelling circles with names and ops
          - writing fn clear-screen to paint a white rectangle over the whole canvas
          - circle-drawing now limited - 15px-thick border between canvas edge and allowed drawing space, which clear-screen clears
          - tidied up some crap, removed commented-out sections
          - added working clear button to window using the clear-screen fn
          - tried tidying-up canvas and border by putting it in an xyz-panel but failed, put back
          - draw-circle now prints the list of args above the circle, need to sort so that it prints around the circle
          - should probably add random colour generator to defcircle, maybe a field :colour
06/01/12: - used-coords now used-circles
          - xy-rng no longer sends off xy maps to used-coords, will change defcircle to send whole circles off to used-circles, can grab :x and :y data from those if needed
          - in fact, removing xy-rng altogether as can incorporate into defcircle
          - defcircle now sends off a symbol pointing to the new circle to used-circles
          - wrote a fn render that redraws all active circles, added a button for it
          - defcircle not actually defining circles, only sending off a symbol corresponding to name to used-circles
          - defcircle fixed, now sends off the symbol pointing to the new circle to used-circles
          - added fn del-circle to remove circles from used-circles, works
          - rewriting new-circle to define a new circle and draw it
          - new-circle for some reason not sending circles off to used-circles
          - buttons mysteriously executing without complaint but not actually doing anything; maybe all in seperate thread/namespace?
07/01/12: - thinking of ditching defcircle and just keeping the used-circles agent, maybe incorporate into new-circle?
          - rewriting new-circle as a macro that creates the circle map, sends it off to used-circles and draws it - used-circles will now be used as a list of maps rather than symbols
          - added fn find-circle to select circles by name from used-circles for when it contains maps rather than symbols
          - adding fn build-circle-expr to de-nest circles
          - or not, because that's a stupid idea - need to have symbols or similar in case nested circles change
          - fixed new-circle so that the actual fn is used in :circ rather than the symbol (i.e. the fn + as opposed to '+)
          - added fn kill-used-circles to empty used-circles to save time debugging
          - rewrote edit-circle so it now removes old circle and re-adds new one with new expression in :circ field
          - added ability to supply an argument to del-circle without using input box so that edit-circle now works properly
08/01/12: - fixed nested? fn to work with new circles (takes a map arg, use in conjunction with find-circle)
          - eval-circle fixed to work with new circles
          - render now draws current totals of all active circles
          - adding fn link-circles to (for now) draw a line/arrow between circles where there is a circle arg (will later make a triangle or sth nicer but a line/arrow is fine for now)
          - done, incorporated into render
          - adding fn count-nested to see how nested circles are, will use to determine colour
          - link-circles now incorporated into draw-circle, removed from render
          - not working, will come back to later
          - java.awt.event.MouseEvent has methods getX() and getY() to get mouse co-ords relative to component, will be useful
          - need fns to get mouse co-ords on click, to check if co-ords within bounds of a circle and to stop circles overlapping
          - adding fn in-circle to check if supplied co-ords are within a circle and returns circle name as a string, nil otherwise
          - in-circle sorted
          - fixing new-circle to check if circles overlap and place them such that they stay onscreen
          - changed in-circle to now take an int and a bool, checks if int is within x range of a circle if the bool is true (y range if false)
          - added fn in-circle? as a wrapper to in-circle, works the same but returns true if in a circle, false otherwise
          - added fn available? as a wrapper to in-circle?, works the same but accounts for if that would be going off-screen or over another circle
          - reintroducing xy-rng to generate a pair of available co-ords using available?; this is now used in new-circle
          - new-circle not not-overlapping, blaming xy-rng, can't see why atm
09/01/12: - xy-rng was only generating unavailable co-ords!  forgot to take out the (not) around the available? predicates *facepalm*
          - increasing font size on canvas, will wok on showing/checking questions next
          - need a fn choose-qset to choose a file containing a set of questions, the others to iterate through and mark answers
          - therefore need a function to check which is the root circle; need to finish count-nested
          - main-window now used border-panel to display shit properly
          - thinking of reading the qset into an agent, could give qs a :correct? field to automate marking/show totals?
          - added agent current-qset that holds a list of questions from a .nqs file
          - added fns load-qset (loads .nqs file and sends off to current-qset) and kill-current-qset (empties current-qset)
          - reversing order of circle rendering so that root rather than leaves is on top
          - meh, looks worse, putting it back
          - new-circle warns that non-existent circle args don't exist but still lets you use them
          - actually, that's good: if you then define the circles you pre-declared it links them up properly, needs a bit of polish though
          - added next q and prev q buttons, dummy fns returning nil for now
          - next and prev buttons now just grab the first question
          - now displays first q properly on opening app
          - changing read-qset to read qs into a list of maps
          - question format is (for now) {:n question-number :q question :a? answered? :c? correct?}
          - qset file just a list of sexps atm
          - closing file dialogue just gives you a blank canvas to play with, need to decide if want or not, probs do but should formalise it rather than just closing the dialogue
          - put dummy fns for next and prev back in, open now does the string manipulation properly (also its :id has changed from :qset to :open)
          - question bit was printing "(quote <q>)" so now using (first (rest (:q (first @current-qset)))) to just get the maths bit
          - adding area for current total, will have to leave inactive until root-finding fn is done
          - thinking of having font red until total is correct (turns green)
10/01/12: - added fn point-in-circle, has original functionality of in-circle (i.e. takes two co-ords)
          - starting working on dnd stuff, writing fn drag-circle-begin to get co-ords of click, check if in circle and send off to new agent currently-dragging-circle
          - will next write fn drag-circle-end to send off nil to currently-dragging-circle, mod the :x and :y fields of the circle and re-render (not in that order)
          - added agent current-question to keep track of question number
          - dnd basically works, has trouble with leaf circles though, will come back to
          - count-nested might be easier to do backwards, i.e. count how many steps before hitting a root (i.e. one with no symbols)
          - so will check no. of symbols in each circle reached, somehow keep a record of all possible paths?
          - clojure tree library/ies?  recursively build a tree?
11/01/12: - wrote fn leaf? to check if circle contains any others as args
          - wrote fn nested-circles to return a list of strings corresponding to the circles used as arguments to the input circle
          - thinking should maybe have a fn that compares two paths, might need to trampoline?
          - no, that's stupid, will just have a list of lists
          - maybe just see if any paths lead to a leaf and return?  maybe a fn find-longest-path?
          - maybe find root by checking circle name against other circles' args, then work from root?
          - doing this now: writing fns is-arg? to check if circle is in another circle and root? to use this to see if circle is a root
          - root? works, writing fn find-root to iterate through used-circles and find the root circle
          - find-root works, now able to evaluate whole trees!
          - sorted out answer diaplying result, marking result - and in under 300ms (from pressing eval button)!
          - success criterion fulfilled! w00t!!1 :D :D
          - edit-circle fixed to re-link circles properly
          - getting NullPointerException when dnding non-root circle
          - can use :popup property of canvas to define context menus (JPopupMenu), probs better than buttons for circle operations
          - writing todo list now in ./TODO
          - wrote fn check-answer to replace cruft in main-window
          - made new, edit and remove check the answer after rendering
          - failed at splash screen by just setting manifest options, not important, will come back to
          - answer now live-updating, could probs remove eval button now
12/01/12: - check-answer now pops up with an alert telling you when you get it right, then calls next-question (which needs to be written)
          - writing fn get-q-no to get a question given its :n value
          - wrote fn next-question to update current-question and load it
          - adding fns question-right and question-wrong to execute on checking answer
          - fixed load-qset, now kills circles, resets current-question, resets answer, re-renders
          - removed new and prev buttons as pointless
          - removed some cruft in the listener for the open button
          - added fn load-qset-init for use in initialisation in -main
          - removed old version of check-answer, new one now used question-right and question-wrong
          - next-question and all that shit works, need to write a bit to deal with end of qset
          - done, now asks user for a new qset on completion
          - began writing fn lisp-to-maths to make questions readable
          - that works, incorporating into question display
          - putting into load-qset, next-question, -main
15/01/12: - adding fn canvas-selected to do popups depending on if an existing circle is selected; if canvas is clicked not on a circle, eval (new-circle), else bring up a popup with options for (edit-circle) and (del-circle)
          - popup sort of working but for some reason doesn't bring up a menu, just executes the first action, namely (edit-circle)
          - turns out popup requires a vector of actions not fns/labels, have corrected but same problem for some reason
          - have defined three actions: new-, edit- and del-circle-action, to use in menus (might help?)
17/01/12: - working on popups but still for some reason executing first item on menu - tried not using canvas-selected and just giving :popup a vector of actions but no joy
          - turns out you're not supposed to put brackets around the :handler fns in actions :$ - now working, need to make it work on circles selected, i.e. (edit-circle) becomes (edit-circle circ) where circ is the circle that was right-clicked
          - also need to make it so that it doesn't think you're dragging when you right click, as currently trying to drag even when a circle doesn't exist
18/01/12: - disabling dragging listeners for now, just until popups work
          - popups seem to work but not evaluating after creating
          - getting "circle not found" with popup editing
          - popup remove circle doesn't do anything, no exceptions though :\
          - new button doesn't work (NullPointerException), but edit and remove buttons still work
          - turns out some kind of arg is being passed to edit-circle (and presumably del-circle), guessing the event?  will experiment
          - looks like a java.awt.event.ActionEvent is being passed to it, annoyingly can't .getX and things like that with it so will keep looking
          - changing edit-circle and del-circle to check if arg is an ActionEvent or a String, currently trying to use .getX and .getY though i know they don't work with ActionEvents, looking into it
          - maybe have a couple of agents for current co-ordinates on click?
          - added agent current-click to keep co-ords on clicking
          - changed new-circle to put circles at the current co-ords in current-click
19/01/12: - made popup new work, now puts circles where the mouse is - edit still getting a NullPointerException
          - wtf, del-circle seems to work fine other than in a popup menu :\ loop generates the right resultant list, just crashes used-circles with a NullPointerException in a popup context
          - right, so del-circle wasn't working because the circle didn't exist yet; works if you (render) between making and deleting the circle
          - edit now getting an IllegalArgumentException, saying that 1 is the wrong number of args to be passing
          - need, however, to sort out the fact that it's now only changing the answer on the next circle op, not even on the next render
          - thinking now maybe losing edit-circle and these context menus and just having it so that clicking on blank makes a circle, clicking on a circle deletes that circle - alex suggests a delete confirmation dialogue but not sure about that, will have to see how it feels
          - coming back to that later, moving on to making the new-circle dialogue usable for now
          - adding a fn new-dialogue for the new-circle dialogue
          - changing new-dialogue from a fn to a def of a frame, like main-window
          - added fn fn-to-maths to take an operation and output its proper unicode symbol
          - removing fn-to-maths as pointless
21/01/12: - working on redoing new dialogue
          - currently have a listbox and a load of radio buttons, need to add listeners for which radio buttons are selected - thinking sliders for numbers, listboxes for circles
          - replacing ops listbox with radio buttons
          - redoing all this shit, now got radios for ops, checks and sliders for 8 number args, checks for circle args
          - right, got a nicer-looking dialogue now, need to write a fn to populate the circle args bit at the bottom now
          - writing a fn gen-circ-checks to do that
          - seems to work, now have a load of checkboxes at the bottom of the dialogue, just need to connect it all up with listeners and shit now :)
22/01/12: - added text field for circle name to new-circle dialogue
          - removing "available" from border/title of circles section of new-circle dialogue
          - feeling like may encounter problems with new-circle dialogue, make sure that (gen-circ-checks) is run every time it's opened
          - writing fn get-circ-params to get info from new-dialogue; for now will generate a map with just :name and :circ, then new-circle will add :x and :y fields
          - realised that circ bit at the bottom can't work thanks to non-commutative - and / (fuck 'em); now going to do (gen-circ-checks) for each arg, also going to mod gen-circ-checks to take an arg to use as a prefix to the generated ids
          - changing get-circ-checks to get-circ-radios as no longer makes sense to have checkboxes
          - now thinking needs an arg check, a num/circ radio, a num slider and circ radios
          - oops, forgot to make gen-circ-radios put the radios into a horizontal-panel *facepalm* done now
          - right, new layout now working but weird amounts of whitespace around left columns
          - also, mixed up left and right ffs
          - redone new-dialogue AGAIN, working mostly how i want it to now but placement of some objects dodgy, may well put things into a vertical-panel of horizontal-panels rather than the border-panel i have now to align them properly; need to sort out new-dialogue layour fully before finishing get-circ-params
23/01/12: - writing fn new-arg-panel to simplify the layout of new-dialogue, sick of killing/yanking so much boilerplate
          - works!  so far anyway, need to test with circles
          - works with circles :)
          - making new-dialogue a fn to regenerate circs, etc., each time new-circle gets run
          - works! :D getting a wrong no. of args error for invoke-later in test-new-box though :\
          - redoing get-circ-params, major rework of old fn
          - written, weird error about get-meta though, guessing the :id property is a metadatum?
25/01/12: - think the get-meta error is because new-dialogue is now a defn and not a def
          - changing it back to a def, will write a fn to re-eval it to get new circs, etc.
          - that worked, now able to select stuff but getting a weird error about using an Integer as an ISeq on line 483 :S
27/01/12: - fixed the fucker, forgot to quote '(op) - now getting a list with 'op as the operator and it's checking all 8 args, otherwise fine
          - replaced '(op) with (list op) which now works, still getting all 8 args though
          - (select new-dialogue [:#arg<n>s?]) returns the actual checkbox not true
          - (.isEnabled (select new-dialogue [:#arg<n>s/n/c?]) returns true all the time :\
          - so does .isSelected
          - ok so .isSelected seems to just work now :\ weird, also .is/setEnabled is for getting/setting state of component (i.e. can diable a button or w/e with it)
          - w00t, get-circ-params seems to work now
          - working on incorporating it into new-circle, currently able to make a new circle from info in dialogue if dialogue is already open, but circ args are maps not pointers to other circs
          - w00t, able to get info out of new-dialogue and draw circles with it, though currently having to call (new-circle) followed by (render) in the repl to do so, also have to re-eval new-dialogue to get new circs as possible args
          - even works with nested circles (and can evaluate)!
          - writing fn re-eval-box to regenerate circ lists etc.
          - works!  w00t
          - test-new-box renamed show-new-box
          - hmmm, not working
          - now if i (new-circle) from the repl the box appears but immediately creates a circle with the default options (i.e. (+ 0 0)); changing stuff doesn't do anything, also get a "Circle not found." alert and a NullPointerException
          - just realised there's no like "OK" button on the box, adding
          - trying to make it so that clicking ok returns the circle, thinking a listener outside of new-dialogue would work better than the :listen field i'm currently writing...
          - started trying to put bits of new-circle into the listener on :new-ok but gonna put a listener into new-circle instead now
          - put listener into new-circle now
          - hmmm, still not showing new-dialogue when i right-click to do a new circle, need to sort that shit out soon
          - dialogue appears when i run (new-circle) from the repl, but :new-ok doesn't seem to do anything; weirdly it seems to be returning some function
          - just doing (show-new-box) followed by (dispose! new-dialogue) returns the JPanel thati s new-dialogue, but not this weird fn
28/01/12: - thinking it might be the listen that's returning the fn, will experiment
          - yeah it is, need to look into how to use listen properly or switch back to using :listen in :new-ok
          - ok so listen installs a listener and returns a fn that, when called, removes all the listeners from the object being listened to
          - got it to work from the repl i.e. (listen ... (prn "lol")) prints "lol" when :new-ok is clicked but new-circle isn't working for some reason
          - tried doing the same stuff as in new-circle from the repl but nothing, suggests problem is in the (fn [b] ...) bit
          - hmmm, works with just an alert
          - works with a do
          - works with a do inside a let
          - works with a send-off inside a do inside a let
29/01/12: - realised that there was a reference to a variable "name" on L534 in new-circle that doesn't exist, have replaced with (:name circ) but still nowt from new-circle
          - commented-out all that context menu shit, now it's (should be) click on blank for new, click on circ for del
          - added fuckloads of prns to new-circle to see what's wrong, looks like it's not getting past re-eval-box
          - ok, commenting out the (re-eval-box) stage gets us as far as "before let", so something goes wrong in that let
          - right, removed params, :name and :circ from the let, still no joy, let's try removing circ
          - circ is now {:lol true :dongs true} and i've taken out the draw-circle stage...
          - ...and the problem is still there ಠ_ಠ
          - trying moving the let outside the listen now, see if that helps
          - oops, just realised i was referring to (:x (.getX e)) (and correspondingly for y), will try removing that first
          - nope, will try the outside-listen thing then
          - nope, but problem def. seems to be between "shown" and "in let"
          - fuck this, doing it tomorrow
30/01/12: - interestingly, on kamek not getting the "shown" message so it may well be that it's not coming out of the (show-new-box) stage, also getting an exception at some point, will try again...
          - ...yep, getting (on kamek) a wrong no. of args exception on running (-main), apparently wrong no. of args passed to invoke-later
          - will try to implement again as :listen field in new-dialogue i think, awkward but might have more of a chance; problem seems to be that (show-new-box) doesn't terminate so it never moves on to the next step in the (do ...) block (i.e. the (let ...) bit)
31/01/12: - will move new-circle stuff into the :listen field of :new-ok
          - works with just (dispose! new-dialogue)
          - switching the order of (re-eval-box) and (show-new-box) helps *facepalm*
          - :\ still no joy doing it in the :listen field
          - :\ works from the repl, did exactly the same thing as in core.clj, from (let [params ...] to (:name c)), no idea what's wrong here
          - seems to work if i replace #(cons c %) with a fn that just returns 'foo and comment out the draw-circle line (having removed the let)
          - seems to work with a simple let, sending (+ 2 2) off to used-circles
          - stops working when the let contains (get-circ-params)
          - re-ordering (re-eval-box) and (show-new-box) doesn't help in new-circle for some reason
          - removing (get-circ-params) from the let in new-circle doesn't work, still dies when i give it a pre-made circle in the let
          - putting (show-new-box) in a new thread gets us as far as "shown" but still no joy otherwise
          - same if using future
          - works if not using (.getX e) and (.getY e) :\
          - works if using current-click rather than the event co-ords
          - disposes if (get-circ-params) is in a future
          - weirdly, it's returning the test circle from before ({:x 340 :y 240 :name bar :circ baz}) and two nil circles ({:x 0 :y 0 :name nil :circ nil})
          - ok, so now it's working and even rendering but it's drawing a nil circle, as described above - i guess (get-circ-params) isn't terminating/isn't terminating quickly enough?
01/02/12: - doing (send-off used-circles #(cons <MAP> %)) makes the agent fail; error is saying "Unable to resolve symbol: select in this context" - wtf
          - interesting, (get-circ-params) in new-circle isn't getting past the first iteration (i.e. it prints "1 true" and stops)
          - also it's printing "1 true" before i've even clicked the OK button
02/02/12: - just realised having the let outside of the lsten doesn't make sense, hence the early "1 true", putting back inside
          - ok, sorted but same problems; still stopping at "1 true" and showing a nil circle on rendering
          - ah, problem seems to occur with send-off; just tried doing send-off manually from the repl and it did a nil circle and stopped at "1 true"
04/02/12: - weird, seems to work from the repl on klungo now, doing the let with the prn and the send-off; maybe it's the await?  who fucking knows anymore
          - but the OK button still kills it, completely erased all the other circle in used-circles from the screen; they're all there in the agent but it only draws the nil one for some reason, it's not even crashed the agent
          - fuck it, coming back to this shit, gonna work on other stuff
          - added menubar with file/help and fns open, exit, about; about just a popup atm but that's not very important anyway
          - made it fullscreen
          - doing the arg placements, need to print at (50, 10) and (50, 90) - font size is 11pt so add 11 to top y, sub 11 from bottom y, sub 2 from each x
          - arg placement done
          - w00t, didn't realise i'd fixed click-to-delete, so one-click sontrol scheme is now implemented
          - seems like last thing to fix is this fucking interface, better get on with it then...
          - but i'm going to procrastinate by removing a load of cruft
          - removed fns:-
            = string-to-int-list
            = xy-rng
            = edit-circle
            = old revisions of new-circle
            = drag-circle-begin
            = drag-circle-end
            = new-circle-action
            = edit-circle-action
            = del-circle-action
            = canvas-selected
            = context menu handlers in main-window
            = dnd handlers in main-window
          - started adding a nuke button but decided better not to
          - removing superfluous buttons (new, edit and remove)
          - added GPL and copyright stuff to about message
          - added mnemonics to menus
          - adding mnemonics to buttons
          - converting actions to menu-items so i can add mnemonics
          - fuck it, that's weird, leaving them as actions without mnemonics
          - whoops, never mind, it was just me being stupid, didnt' realise actions had a :mnemonic field, sorted
          - removed some cruft from show-new-box, remember need to sort out making it look native
          - back to fixing new-circle
          - tried setting :x and :y constant and removing params, putting (future (get-circ-params)) in :name and :circ but no joy, still a nil circle
          - gonna putting the circle-getting stuff in a separate fn, get-new-circ
          - rewrote new-circle, put in :listen field of OK button
          - realised why that wasn't working: canvas listens for a mouse click then calls (new-circle e) rather than show-new-box; gonna try to munge the two together
          - just playing around with having the listener inside new-circle (what was show-new-box); having it just dispose on clicking OK is making it reappear every time is disposes
          - ok, maybe i'm missing something but seesaw has a dialog fn :\ gonna try to re-implement new-dialogue as that
          - weird, trying to have it print the circle in an alert makes it not do that but dispose and re-show the dialogue box
          - oops, was pressing wrong OK button, *facepalm* ffs
          - hmmm, no joy with the right OK button, but did get an interesting error message: Exception occurred during event dispatching: java.security.PrivilegedActionException: java.security.PrivilegedActionException: java.lang.Exception: Unable to resolve symbol: select in this context (NO_SOURCE_FILE:0)
          - weird, can get the text from :name-field but it still doesn't like get-new-circ
05/02/12: - changed :succes-fn of new-circle to send-off a fake circle grabbing name info from the box to used-circles; that works
          - also works as the custom OK button listener i implemented
          - added :cancel-fn to new-circle that disposes of new-dialogue
          - made new-dialogue a fn again, now that i'm using dialog it'll let me native! it
          - commenting-out the old OK button and its listener code now
          - hopefully now that new-dialogue is a fn i won't new re-eval-box? pfft
          - will need to either incorporate get-circ-params into new-circle or make it able to accept the dialogue box as an arg
          - yeah, will make the box an arg
          - get-circ-params now very brittle indeed, dirty little hack but might work, hopefully?
          - of course not!  still gets stuck at "1 true"; have added more prns to get-circ-params, looks like it gets stuck after "1 true" but before "num", so somwhere in the recur?  maybe it doesn't like recurring with fns?
          - hmmm, simple loop in the repl with a fn in the bindings works
          - right, select-n seems to be dodgy, it freezes when putting the same fn into new-circle, telling it to print a selection using it as :success-fn
          - maybe i'll have to incorporate get-circ-params into new-circle, will try
          - going to rewrite select-n and select-c as checking against n and taking an arg r? that, if true, selects the radio button, else selects the slider or circ radio button
          - also takes an arg n? that says if you want the radio for num or circ (true is num)
          - that was all bollocks, have kept what i wrote in the scratchpad for now but it was pretty damn ugly: playing aruond with keywords now, so instead of all that read-string shit it's now selecting as normal, but with (keyword (str "#" ...)) in it
          - hmmm, this at least terminates, but it's sending a nil circle to used-circles
          - also i forgot to add a bit that disposes of the dialogue box >:| *facepalm*
          - added in await, dispose!, render - now the box doesn't open, just adds a nil circle to used-circles :(
          - removed all that crap, still doing it >:| will leave it out for now, just concentrate on the main issue
          - ok, it's back now :\ whatever
          - also the new select-n seems to work :D
          - right, it's returning a nil circle because it's evaluating its success fn before the user changes anything, so it's just getting blanks and zeroes
          - will try wrapping the get-circ-params shit in anonymous fn
          - OH MY FUCKING GOD IT APPEARS TO WORK mustn't get my hopes up yet though
          - it does indeed appear to work (at least with numbers, will try circles now)!
          - IT WORKS WITH CIRCLES OH MY FUCKING GOD IT WORKS *SOB* *SOB* *SOB*
          - also, just realised i haven't made clear-screen clear the screen since i made the window bigger, doing that
          - also, clicking on the canvas is fucked-up, checking that shit out now
          - yeah it was giving new-circle an arg, that probs doesn't help
          - actually, think i'll try to eliminate current-click by using that event arg
          - new-circle now requires an event as an arg
          - ima back this shit the fuck up before it stops working again
          - making new-circle take 2 args x and y (for co-ords) instead of the event
          - fixed available? as had old screen dims in it
          - weird, seems to be entering new-circle when clicking on canvas as prints the x and y but isn't bringing up the dialogue
          - maybe it's showing it elsewhere?  another thread?
          - removing pack! doesn't help
          - removing :cancel-fn doesn't help
          - weird, now the new-circle dialogue isn't disposing correctly on clicking OK
          - fixed check-answer s.t. if there aren't any circles it sets :answer's :text to 0
06/02/12: - discovered (debug!) :O
          - apparently not showing because it's getting a java.security.PrivilegedActionException at line 492: new-arg-panel can't resolve the symbol arg1 (line 441) for some reason (it's one of the button groups)
          - trying just letting a button-group g inside new-arg-panel
          - ok, now it's struggling with arg1r, will try letting a button-group gr now
          - SORTED.  FUCK.  YES.
          - backing up now, will tidy up after pushing to github
          - all seems good, need to make the new-circle dialogue dispose before showing the "correct" alert though
          - also possible bug with moving on to new qsets, looking into it now
          - nope, looks fine, must've done sth wrong
          - **BIG CLEANUP**, removed things listed below
            = currently-dragging-circle
            = current-cilck
            = defcircle
            = all the arg<n> and arg<n>r button-groups, leaving op for now
            = comments from new-dialogue
            = get-circ-params
            = get-new-circ
            = comments from new-circle (also added docstring)
            = prns (and their dos) from new-circle
            = old revisions of new-circle
            = await from del-circle
            = :mouse-moved listener from canvas in main-window
            = comment from render
          - left all that count-nested shit alone, to work on in the future
          - redoing del-circle to take x and y args instead of using current-click
          - also changed it in main-window
          - removing (send-off current-click ...) and its do in canvas in main-window
          - cool, seems to still work after tidying now :)
          - removing buttons (Open, Render, Clear, Evaluate!)
          - also restructuring main-window so that q and a are now :center and :east (was a border-panel in :north), and canvas is :south
          - ych a fi, canvas is now too big (takes up whole screen) so taking 50px of its height
          - harrumph, looks like it's going to need another 50px
          - yay, better :)
          - right, removing bit of render that draws the values in the corner (maybe add a nicer ver with boxes at some point?)
          - put dispose! back into new-circle's :success-fn, gets an IllegalArgumentException about the dialogue box's metadata but doesn't seem to do any harm, solves the problem of marking the q at least
          - gonna add a wait/sleep/whatever so you can see the diagram
           -shit, just tested it on alex's comp and it makes a big-but-not-maximised window that when you maximise it it gets fucked up; need to sort making it a fullscreen app
17/02/12: - trying to antialias the canvas using RenderingHints (like http://goo.gl/UcVdX)
          - added highlighting listener to main-window, mentioned a fn highlight that i'll write now
          - forgot that i actually need to un-highlight circles, smooth
          - did simple is-circle-or-isn't check but re-rendering all the time looks shite, flashy
          - written thing that checks if the mouse passes over a boundary 1px around the circle box, but of course it doesn't work as it refers to a circle that doesn't exist when you're outside it! *facepalm*
          - will change so that it doesn't have the 1px border and just checks that you're at the edge of the circle
          - hmmm, still not working, also flashy and shti when moving mouse within circle - maybe ignorable?  shoulds probs sort but priorities frankly
          - added a prn to the edge checker, not printing so i guess it's not detecting
          - forgot to add a bit to stop it checking when not on a circle so getting loads of NullPointerExceptions, have done that now
          - that's sorted the thousands of exceptions out, but still not detecting edge passes
          - put the edge-checking bit in the cond now, since c has to be non-nil
          - stupid fucking moron, have got it backwards, only highlighting on an edge! *facepalm*
          - put it the right way round now but still not detecting edge passes, must've gone wrong in the calculation of e? somewhere
          - yeah, forgot to switch round the references to (:x c) and (:y c) in the top/bottom edge checks ಠ_ಠ
          - nope, still nowt
          - getting a fair amount of exceptions about invoke-later, i think it used to be 1 but got 3 on the last run, should probs keep an eye on that
          - increased highlight radius by 1px too
          - yeah, much nicer/clearer - back to the problem at hand now :P
          - un-highlighting now works, but only if you move the mouse very slowly - guessing that's because you have to be exactly on the edge and moving the mouse fast skips a few co-ords at a time
          - will have a buffer of ~5px or sth around the circle that counts as an edge
          - managed to fuck up the bottom and right checks but the top and left seem to work, not sure if 5px is big enough though, still seemed to struggle with v. fast mouse movements - will add a bit to the highlight section that clears and re-renders before highlighting, also thinking of having a buffer like with e? but inside the circle, so that it only re-renders once
          - of course, that shit don't work - when you're outside the circle, c becomes nil so it never detects it - will have to have a buffer of however many pixels inside the edge of the circle
          - have bumped up the buffer size to 16px and added an internal buffer of 16px as well
          - ok, sorted - apparently even a 16px buffer and another 16px internal buffer aren't enough to escape my crazy fast mouse movements
          - also just realised my internal buffer is a bit wrong, fixing...
          - looks like it works!  v. fast mouse still sometimes avoids the un-highlighting stage but it's basically fine; still a bit flashy though, should sort that eventually
          - writing a fn detect-qseg that tries to unify a circle with a bit of the question, for use in highlighting
          - looks like detect-qseg is gonna be quite hard, also don't know how to change the colour of only one part of the text - may have to split each character into a separate label and use that; would probs need detect-qseg to then output a character range rather than a substring so it can iterate through the labels and change colour accordingly
          - i could, however, generate separate labels inside nested border-panels from the question (as it's a sexp) and config! the border-panel containing the parts i need
          - writing a fn extract-qsegs to give me the nested labels and panels as detailed above
          - written a rough draft of extract-qsegs, need to test, fix
          - weird, running (extract-qsegs) in the repl complains that i'm passing an arg to it when it doesn't take one and i'm not passing one
18/02/12: - just realised the :q of each question in the qset is quoted, have put an eval before it in extract-qsegs
          - stupid, getting the complaints about args because i tell it to recur with arg (first in) on line 78
          - have written a test fn for extract-qsegs, namely test-qsegs; makes a frame containing the output of extract-qsegs
          - writing a rough draft of extract-qsegs that generates a list rather than nexted border-panels, just to figure out the recursion and stuff first
          - weird, getting a NullPointerException on running load-qset, should keep an eye on that
          - added more antialiasing stuff to -main but stil seems to be doing precisely nowt; again, should probs keep an eye on that
          - :\ added another couple of lines using system/setProperty, still seems to be doing nothing
          - right, got my list version of extract-qsegs to work (missed out the recur bit, ffs), time to make it do border-panels!
          - using qstest.nqs, extract-qsegs gives me a frame with "25" in it :\
          - just realised that this is in fact "2 5", whcih is good as i haven't fixed the bit that just replaces rather than appends strings
          - basically, need to find an equivalent of cons for border-panels and labels
          - gonna add a border property to each border-panel i think, so i can see how they're nested (just for now, will remove later)
          - yes!  there's a border around the "5", so it must be doing at least *something* right
          - tried using str to concatenate (:text (:center out)) with (first in) in the :else bit, but to no avail - still just replacing text
          - which will be mainly because (:text (:center out)) returns nil (i added a prn to check it)
          - turns out (:center out) returns nil too
          - trying adding an arg n to extract-qsegs to govern how the ids are named
          - harrumph, it doesn't like me going (eval (read-string "... out...")) for some reason, says out isn't defined even though it's within the loop binding
          - added a "Check" button that does (check-answer) when pressed
          - thinking this whole approach is a bit too complicated; will try to just split the question up into individual labels per character i think and generate character ranges corresponding to where the sexp appears in the question
          - right, so now writing a fn question-labels that returns a horizontal-panel full of id'd labels, one for each character - the quality test between sexps and bits of question will have to be done by string comparison of (lisp-to-maths <sexp>) and the output of some fn that iterates through the question labels and outputs a string
          - added a fn test-labels that shows a frame containing the output of (question-labels)
          - just realised :items in a horizontal-panel is a vector, so can build up a list, into it into [] and config! the panel - bear in mind if returning to the previous approach too
          - test-labels still throwing up a tiny, empty frame for some reason
19/02/12: - question-labels on klungo complaining about inputstreams, apparently it doesn't like labels
          - now creating i as a vector directly rather than using into like a fucking moron
          - trying to do question-labels as a macro now so can iterate across i, evaling each label - labels have to be quoted when conjing otherwise it moans about inputstreams, for some reason it can't just make a vector of JLabels (or a list for that matter)
          - weird, macro runs fine but the vector it gets at the end is empty
          - ...that may have had something to do with not having loaded a question set *facepalm*
          - but now it gets as far as prning "empty!" then enters the debugger
20/02/12: - putting (str ...) around (first q) worked!  but only with a set string...
          - enters the debugger if we use the first question in current-qset
          - gonna try passing a  string to it as an arg instead
          - also renaming it string-to-panel
          - ok, problem is that debugger is entered when we call (lisp-to-maths (eval (:q (first @current-qset))))
          - looking at load-qset now, as keep throwing exceptions on using it
          - other than that, seems to work (though debugger appeared for some reason)
          - debugger seems to be appearing on using lisp-to-maths for some reason, will check that out
          - debugger does *not* appear when going (lisp-to-maths '(+ 1 2 3 4 5)) or (lisp-to-maths '(+ 1 2 3 (+ 4 5)))
          - debugger *does* appear when going (lisp-to-maths '(+ 1 (* 2 3 4) 5)) and (lisp-to-maths '(* 1 2 3 4 5))
          - right!  seems to be that emacs doesn't like unicode.  ffs.
          - even using unicode * it works, just opens debugger too
          - changing test q in qstest.nqs to only have + and -
          - yes!! it works! now to do the highlighting stuff
          - adding a fn unhighlight to return text to all-black
          - put font config in string-to-panel
          - adding string-to-panel shit to main-window
          - adding border stuff to string-to-panel, probs not necessary but better safe than sorry
          - problems with load-qset, was trying to config the :text of the panel, now fixed
          - same problem with next-question, fixed
          - whoops, didn't need the border stuff in string-to-panel, stupid, removing
          - optimised base case in the loop in string-to-panel - unnecessary config! shit was in there, moved to label initialisation
          - appears that unhighlight doesn't work, investigating
          - thought it might be that the keyword in select wasn't in a vector, but still nowt :(
          - renaming unhighlight to highlight-text that takes a start index, an end index and a colour string - generalised version of highlighting bits of text rather than just unhighlihgting all text
          - moron, had <= instead of >=!
          - cool, that works now :) have also added a fn unhighlight-text as a shortcut to turning it all back to black
          - changed detect-qseg to detect-subs for the general case (of strings, rather than just of circles and the current question)
          - not working, complaining that it can't treat a String as an ISeq, investigating
          - just realised had my cons the wrong way round ffs, fixed
          - still not working, now complaining as before but about an IFn rather than an ISeq
          - changed it to return all instances of the substring, not just the first, same exception about the IFn though
          - also realised that binding subs and sups is unnecessary, have removed and just left as args c and q
          - woo, nearly works now, complaining about a string index being out of bounds so i guess it's an off-by-one-error
          - realised that it was trying to get a substring with an end index way past the end of q so have changed the equality check to check if j+length is past the end of q instead
          - having problems with reverse, think it's probs because i've replaced clojure.core/reverse with clojure.string/reverse in the repl, restarting slime
          - yep, restarting slime's done it.  works now but is returning a list of lists, think it's because i'm consing rather than concating
          - yeah, that's fixed it, only problem is now that it's getting several instances of the last occurence of c, rather than the earlier occurences
          - weird, getting NullPointerExceptions when i try to use it with a let to get the actual substring
          - w00t, sorted, just got a bit confused between c and st
          - only problem is it gets stuck if the bit before the string is repeated (e.g. (detect-subs "a" "lalala"))
          - OMFG IT HIGHLIGHTS XD
          - now to make it unhighlight properly
          - OMFG IT UNHIGHLIGHTS XD
          - removing prns, extract-qsegs and test-qsegs
          - hmm, removed loads of prn crap, now it freezes on highlighting :\
          - detect-subs now freezes :( investigating
          - foolish, fucked up my brackets :P
          - works now, also have changed it so that the range extends one before the actual end of expression to avoid highlighting one bracket
          - weird, detects 2-4-6-8-10 on its own but won't detect 1+2+3+4+5 on the same canvas using the first q in the current revision of qstest.nqs
21/02/12: - now using .setResizable in -main to stop the user resizing the window (until i sort the maximising bug)
          - can't test on stumpwm annoyingly - trying to set it to fullscreen but no joy so far, see java.awt.GraphicsDevice/setFullScreenWindow
          - giving up, turns out the normal-sized window works ok on stumpwm, bit dodgy but usable for testing
          - need to sort out this flickering issue, need to detect passing the boundary rather than being in a circle
          - adding fns circ-drag-begin and circ-drag-end to add circles as extra arguments to existing circles
          - removed old question (as a string) code from main-window
          - added an agent last-2-coords which will record the last two positions the mouse was in and compare them to see if the mouse has entered the circle
          - adding a fn entered-left-circle? which uses last-2-coords to check if the mouse has entered or left a circle
22/02/12: - just realised i haven't told it how to unhighlight text, but the circle highlighting looks much better! :D
          - hmmm, unhighlighting not working, must have the cond wrong
          - also not highlighting 1+2+3+4+5 circs :\
          - looks like the problem is with re-pattern - doing (split "((1+2+3+4+5)-1-2-(2-4-6-8-10))+(1+2+3+4+5)" (re-pattern "1+2+3+4+5")) just returns the original string, but doing the same with "2-4-6-8-10" is fine
          - tried just using the regex #"+" but it complains about meta-characters
          - works perfectly if i use #"+" :)
          - writing a fn format-question to sort out the +s, have made it sort out the other 3 symbols too
          - ...but for some reason it's not terminating :\
          - ych a fi, just discovered the escape fn, rewriting format-question now
          - annoyingly, that now works but i can't lein run the project anymore for some reason :\
          - also, decided that format-question is stupid, just gonna do the escape as part of detect-subs
          - removed format-question
23/02/12: - wrote fns circ-drag-begin and circ-drag-end, added agent currently-dragging-circle
          - circ-drag-begin sends off the dragged circle to currently-dragging-circle
          - circ-drag-end deletes the target circle and replaces it with a similar circle with the dragged circle as an extra arg
          - need to write a fn add-arg to add an argument to an existing circle
          - done, annoyingly can't test it until back on klungo though :(
          - all added to main-window though, hope :mouse-pressed and :mouse-released don't clash with :mouse-clicked
          - ...but they do, ffs
          - also, del-circle wasn't defined at that point, so have added a dummy declaration just above add-arg
          - now might actually be the time to reintroduce context menus
          - seesaw has events called :drag-enter and :drag-exit, weirdly not recognising them though :(
          - have tried importing seesaw.event, even replacing seesaw.core/listen with seesaw.event/listen but no joy :(
          - currently :use-ing [seesaw.event :exclude [listen]]
          - derp, was using :events not :named-events so it should be :ds-drag-enter and :dt-drag-exit
          - as it happens they still don't work but at least it's finding them now
          - those dnd events are trying to drag the panel to some other recipient field is why they don't work, hmmm...
          - making the dnd stuff use :mouse-pressed and :mouse-released for now, will use keyboard temporarily for circle ops i reckon
          - ffs who even fucking knows why :key-pressed doesn't react to keys being pressed
          - might as well try :key-typed...
          - ...nope, of course it doesn't work!
          - upgrading seesaw to 1.3.1-SNAPSHOT
          - added new-circle-action, del-circle-action and canvas-selected back in, reverting to using context menus like a little bitch
          - adding fns new-circle-handler and del-circle-handler to get rid of the ActionEvent bullshit
          - right, new-circle and del-circle now usable from context menus
          - ok, del-circle is still broken with the "Remove:" dialogue and shit, fixing it now
          - yep, fixed, removed all that shit about ActionEvents and strings so it just works on an x- and y-coord now
          - ...and it works!  brilliant
          - hmmm, dnd stuff is pretty fucked, it gets as far as clearing the screen and removing the current circle but it doesn't add the edited version back in
          - added an await to circ-drag-end, still no joy - getting NullPointerExceptions after it's deleted the circle
          - added prns to drag-circle-end, seems to be replacing :circ with just a list of the target circle (i.e. '(0 0) -> (c0))
          - looks like i'm passing a string to add-arg rather than an actual circle, adding a find-circle to circ-drag-end
          - :O IT FUCKING WORKS, I CAN TOTALLY DRAG TO ADD CIRCLES NOW :O
          - adding dnd functionality to drag-circle-end whereby circles can be moved as well as extended
          - harrumph, dragging to a new space is crashing it - comes up with a message box that doesn't load, then app is frozen
          - ok, turns out it was the await freezing it up, have commented it out, but getting "circle not found" alerts after each drag - re-renders properly though when mousing-over the prospective placement after closing the alert
          - adding prns to drag-circle-end
          - weird, drag-circle-end seems to delete the other circles in used-circles - looks like mod-xy is working though, and it's getting through all the prns
          - right, commenting-out the del-circle line makes it work fine (apart from obvs. duplicating circles): problem is therefore with del-circle, maybe using the :x and :y fields of currently-dragging cirle is just outside of it?  will try adding, say, 10 to each co-ord
          - yay, works :)
          - have also subtracted 50 from each target co-ord to centre the circle on the mouse cursor
          - hmmm, doesn't work if the circle being dragged is an arg of another circle (i.e. non-root)
          - think this is because it re-evaluates on deleting a circle - will try rearranging the do to make the new one before deleting the old
          - actually, fuck that, will just remove the (check-answer) from del-circle and put it somewhere else
          - namely in the code for moving the circle and in del-circle-handler
          - yay, moving is fixed :) turned out i was right about the order in which the old circle was deleted and the answer was checked in del-circle, w00t
          - trying to fix highlighting now
          - a circle representing 1+2 highlights the 1+2 bits, but also +(2
          - also, getting a NullPointerException every time i try to unhighlight (i.e. when i leave the circle)
          - not helped by adding an (await last-2-coords) to main-window
          - also, have put in a dummy def for check-answer as used long before defined properly, cba to move things around atm
          - put some helper/testing fns after highlight to sort out detect-subs
          - not quite sure why i'm redrawing a circle on mousing-off, that's probs what's going wrong tbh
          - ah, i see, it was my foolish unhighlighting hack, it tries to do bits of highlighting when you're not actually on a circle - restructuring the outer cond to fix it
          - right, it's complaining about a NullPointerException at line 858 on leaving the circle, also it's not highlighting properly now :\
          - ych a fi, had my l? and (not l?) the wrong way round *facepalm*
          - however, it now ONLY FUCKING WORKS!! :D unhighlighting text, circles, everything!  it's like, usable now!  all that's left to do is to fix detect-subs and get rid of the dialogue box and we're sorted :D
24/02/12: - replaced the >= bit in detect-subs with an easier-to-read zero? and subtraction
          - fixed a problem with highlight, turns out i was dec-ing in detect-subs because i was randomly inc-ing in highlight! *facepalm*
          - problem with detect-subs is that if the substring isn't at the end of the superstring, because it splits around the substring it has the end of the string as the last element in the split list s - need to check if the end is the substring and discard the last item if not
          - weird, getting an out-of-bounds complaint saying the index is -5
          - fucking moron, got the args to - the wrong way round! ffs
          - seems to be fixed :D will test on klungo later but the tests seem to work :)
          - time to sort out circle-autonaming
          - hmmm, new-circle is complaining about wrong number of args to invoke-later
          - yep, autonaming seems to work, just counts @used-circles and prefixes that number with "c" for each circle's name
          - now going to sort out the check button, remove the "correct!" alert from check-answer and put it into the button's handler
          - have moved some stuff out of question-wrong and question-right, namely the answer's running total config! bit
          - have now moved that into its own fn, update-answer
          - also added a dummy declare for upadate-answer
          - replacing check-answer with update-answer in other fns so that the submit button has to be used
          - there was an extra dummy declare for check-answer at line 674, have removed
          - removed the Thread/sleep from new-dialogue - no longer needed if only doing update-answer rather than check-answer
          - again, sadly will have to test when back on klungo
          - made it such that find-circle just returns nil if circle isn't found
          - same for del-circle actually
          - POW! had some unnecessary decs in detect-subs
          - hmmm, not detecting supercircle expressions in the text
          - looks like it's because it's resolving nested circles to like "c0+c1", etc.
          - added prns to highlight
          - hmmm, when i highlight the root circle, it's not getting as far as prn-ing q
          - it's getting an empty i for the nested circle
          - detect-subs is returning '() for some reason
          - it doesn't like splitting using #"(1+2+3+4+5)+(2-4-6-8-10)" for some reason, even if i escape the +s
          - the new check button works, btw
          - probs need to escape the brackets; let's try that
          - yep, that was it :D
          - ...except that's broken *all* the highlighting :\
          - detect-subs still returning '()
          - i is empty in every case
          - hmmm, s is empty
          - getting a NullPointerException sometime between the prns in the second iteration
          - it also says "s: (\"(\")", which is weird
          - when it's not butlast-ing it gives ["(" ")-1-2-(1+2+3+4+5)"], which is right
          - when it is, it gives '("("), which is right, but odd that it's a list, rather than a vector
          - weird, wasn't recursing at all on the maps bit, must've been a total fluke that it was working at all
          - put recur in, now it's fucked
          - looks like it's because "(" is what it's looking for and there are two of those at the start, even though only one is the substring we're trying to ignore
          - looks like highlighting is also broken; the leaf circles are just getting a big blue circle over them rather than behind them
          - thought it might be because (count c) was 1 too big; apparently not
27/02/12: - tidied up whitespace and shit in detect-subs rewrite
01/03/12: - right, gonna sort out this detect-subs nonsense once and for all
          - getting an StringIndexOutOfBoundsException saying some index of -24 is used
          - looks like i've got my indices the wrong way round!  did a test with (subs "rofl" 1 3), returning "of", and (subs "rofl" 3 1), returning a similar exception complaining about an index of -2
          - harrumph, now it's complaining about a -1 index on the first iteration (the -24 one was on the second iteration)
          - nope, of course i haven't got my indices the wrong way round - i've not added (count (first s)) to the second one!
          - ffs, now getting an IndexOutOfBoundsException with no message but the string problem seems to have been solved, i guess we'll see if it's actually right when i fix this one
          - whoops, forgot to add (count (first s)) to :e, done
          - yay!  it's now not crashing!  let's see if it's right...
          - well the first result is right, but it *is* only getting one result...
          - ...should be getting two results with the question i'm using
          - tried removing that butlast crap from the start, still no joy, still only one result'
          - maybe it's because i'm recurring with (rest s) even when i don't get a result...
          - yay!  that seems to have done the trick, will put that butlast shit back in now as this version is giving me the last map twice, but it seems to be better now :)
          - seems to be working now :D
          - ...but highlighting isn't >:\
02/03/12: - turned out i was trying to get :s and :e of the entire list that is the output of detect-subs, fixed so it now calls (first i) in highlight
          - also changed it to use highlight-text, rather than that horrible extra loop with range and shit
          - works! :D
          - tidying up shit, removing comments and prns
          - leaving the detect-subs tests in so i can move them into the actual tests for leiningen at some point
          - also moving highlight below un/highlight-text as it uses highlight-text
          - still seems to work after tidying-up...
05/03/12: - everything is shit :'( need to fix it by wednesday apparently
          - removing commented-out shit from main-window
          - rewriting circ-drag-begin to not use currently-dragging-circle, just edits used-circles as it goes
          - modding del-circle to remove all that ActionEvent shit, changed args to x & y where (x,y) are co-ords or x alone is a circle name
          - yep, that works
          - changed last-2-coords to current-coords, an agent containing a map {:x x :y y} that gets updated on mouse motion
          - commented-out entered-left-circle as no longer needed
          - fixed new-circle-handler and del-circle-handler to use current-coords
          - also canvas-selected
          - need to fix drag-circle-end too, also drag-circle-begin isn't quite working
          - yeah, drag-circle-end is complaining about a NullPointerException as it uses currently-dragging-circle which is no longer updated by drag-circle-begin
          - coming back to that, working on link-circles now to get arrows happening and to get arrows pointing to args
          - link-circles now draws to the arg, need to make it an arrow or some shit now
          - weird, just had a ting where i had two linked circles; right-clicking on the arg one only gave a `New circle' option (not `Remove circle'), then everything got fucked up on clicking elsewhere
          - link-circles now joining to arg placement with an indicator circle at the end of the line, draw-args no longer printing circle labels
          - modding draw-circle to have arrows around the edges of the circle
          - sorted, also added a line just before the first arg to show where the args start
          - writing a fn add-placeholder-arg that adds a placeholder arg to an existing circle
          - cool, that works; adds \P as an arg to any existing circle, up to 8 args
          - whoops, off-by-one error - was able to have 9 args before the alert popped up
          - cool, fixed
          - though should probs fix check-answer, etc., so that they don't try to use \P for stuff
          - writing a fn remove-placeholders to return a circ with placeholders removed, for use in calculations
          - sorry, it's eval-circle that needed it, but it's done now
          - seems to work :) (still need to make sure eval-circle works when placeholders are present but we can forego that for now and come back to it later; time to work on something else!)
          - writing a fn arg-in-circle that returns the index of the arg you're hovering over
          - changed arg-in-circle to check a 16x16px square around the co-ords of the arg
          - tested arg-in-circle, seems to work for all numbers of args, bear in mind it returns a zero-indexed index
          - adding a fn op-in-circle? to check if the mouse is over a circle's op
          - seems to work
          - will incorporate these into main-window in a bit; going to change the bg and stuff now, and remove the border from the calculation canvas
          - sorted, now all white and no calculation border
          - clear-screen modded accordingly; now clears the entire canvas
          - need to decide on a unified control scheme incorporating circle creation, circle deletion, op and num input, dnd linking and dnd repositioning
06/03/12: - working on revamping the control scheme according to the diagram on the whiteboard (controls.txt)
          - changing :listen in main-window to just detect :mouse-clicked, checks x, y, if it's a double-click, if it's in a circle, if it's on an arg, if it's on a placeholder, if it's on the op
          - have also commented all the lets, as they are many and varied (not to mention terse)
          - revamped controls to try to avoid collisions
          - also have separated :mouse-clicked and :mouse-pressed to see if i can separate drags
          - have added tests for left-click, right-click and ctrl-click
          - doing a fuckload of prns to check if any of these flags are set
          - weird, apparently there isn't such a method as .getMouseModifiersText for a java.awt.event.MouseEvent :\ but it's in the api...
          - oh, i see, it needs an int as an arg, i'm guessing this is supposed to be .getModifiersEx
          - weird, still making the same complaint
          - testing just prning the results of (.getModifiersEx e)
          - weird, have commented out the lines using .getMouseModifiersText and it's *still* complaining about it
          - also commenting-out :popup for testing purposes
          - **MODIFIERS**
            = left: 0
            = ctrl: 128 (both ctrl-left and ctrl-right are 128)
            = right: 256
            = drag doesn't return anything
            = no modifiers for double but it does do a single-click first, maybe add a timer?
          - can distinguish drag and click because a click goes like this:-
            = MOUSE_PRESSED
            = MOUSE_RELEASED
            = MOUSE-CLICKED
          - but dragging doesn't issue MOUSE_CLICKED
          - can use :mouse-dragged to track dragging, but dragging issues an event every time the mouse moves whilst dragging
          - discovered .isControlDown and .getButton, have switched to using them instead
          - rewritten the controls a couple of times, no longer need ctrl+click or double-click, only need to distiguish left and right and click and drag
          - have written the control structure for clicking in, dragging is a wip as need to sortout what happens on release
          - click-to-add-circle works (though still using old dialogue)
          - click-to-add-placeholder works
          - thinks all dragging is right-dragging though, and complained about new-circle for some reason
          - hmmm, eval-circle is fucked somehow
          - ah, remove-placeholders is fucked
          - hmmm, fixed remove-placeholders but it looks like eval-circle is fucked; it's making a list of vectors rather than a map for some reason
          - ah, was doing (remove-placeholders (:circ circ)) rather than (:circ (remove-placeholders circ))
          - sorted :)
          - cool, fixed - only problem is it's complaining about a wrong number args pased to nth somewhere
          - ah, had missed out a from the bit that checks p? in main-window
          - arg- and op-detection now work :)
