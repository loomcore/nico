Chapter 3
=========

- In a fair few places there are mentions of "Nico includes..." or "Nico uses...". The implementation is not documentation or specification of your system, it's what you did. It's how you software engineered everything to work. You might also ask why more. So "Nico uses external files containing sets of questions..." should be phrased something like "The system stored sets of questions in external text files to enable persistence of questions and the easy manual modification of test sets for evaluation of the system". The examiners are looking to give you marks, not Nico.

- When describing the interaction handler, and another component, there's a lot of text mentioning the 'middle layer' and front end etc. When you mention those terms, the reader is trying to construct a representation of the system in their head. A high level diagram of what you mean would be far simpler. The management of mutable state diagram you have isn't really compatible with the layer view of what's going on.

- The first time you use ?, write "question marks". Often when people use LaTeX, as in your pdf, there are unlinked references that show up as ?.

- Some paragraphs are huge. Try to make them 1/3 of a page or less if you can.

- When you mention cognitive dimensions, make it fairly explicit. In the "Later Revisions" section, instead of "required the user to perform operations without it being entirely obvious what the consequences would be..." do something like "required the user to perform operations without the consequences being particularly obvious. This can be analysed using Cognitive Dimensions [] as having premature commitment due to...."

/ Some informality needs to be changed - "say for example" -> ". For example, if the user had accidentally..."
 and "by this point" should be something better or removed.

/ Current revision -> Final Revision

/ "The notation changed somewhat" - by magic? How did it do that?! "The design of the notation was changed to address the problems described above:..."

- colour blindness? Can't see any mention of this. It would be good to put this in the design, then refer back to it from implementation. The colour coding bit should be in it's own sub-section.

- tenses - "have been" - "were". Need to use the past continuous tense.

- Revision sections - It would be better to section the implementation by component or issue - like "user interface" with "colour coding" as a subsection. If something changed during implementation, you can then say "the colour coding was initially set to change on every new circle; however, this was found to cause confusion and was changed to be...".

Chapter 4
=========

/ You need an experimental design section that describes why you used the cognitive dimensions questionnaire for evaluation instead of other means of evaluation, why you compared paper questions with nico instead of a calculator, why you used a tutorial video instead of a text based tutorial, why you used a likert scale instead of another scale, why you used time as a metric of comparison,

/ "Subject" is now a politically incorrect term to use. You have to use "participant instead".

- The first two results tables are pretty big and are of no real use. You should use a bar chart (not 3d) of some kind or do some comparison box and whisker plots.

/ Although the line graphs are nice, you can't get away with having 10 of them in the main body of the dissertation. The options you have are to put them in the appendix, select a few interesting ones and put the rest in the appendix, or display the data in some other, more compact, way.

/ The t-test stuff looks good.


--------------------------------------------------------------------------------


/ Add an overview of system architecture before starting backend.
/ use back-end instead of backend.
/ Consider changing five clojure agents paragraph to list?
/ A rough model caption -> "A model"

/ Some of the implementation (sec 3.1.1) is too detailed, needs to be higher level. Difficult for reader to remember which function is which. Mostly explanation of code, should really be explanation of components.

- Look at luke's part II - section on user interface, sequence diagrams, comparison diagrams - before/after.

/ More subsections needed

- There are interesting implementation parts that you can explain - the interaction between clojure and the UI.

/ Paragraph after Figure 3.5  - Too informal and first person. Try to de-personalise slightly and avoid things like "get on with the project".

- Reference to Figure 3.6 shows up as Fig. x.y
/ refer to panels "one at the top" etc as information panel and canvas from the outset.

/ Again, mainly describing functionality, why does creation of a new circle initialise with two arguments ? ? and operator ?. Did you just pull that out of a hat?

/ Need colour coding explanation - have you considered colour blindness? Is there any reason you picked green for addition? A psychological reason? Why didn't you go with random colours or connection based colours?
  = though still need to discuss colour blindness?

/ How did you do the colour matching (when the mouse hovers over)? Is there a link between the text and circles, or is it just a string search?

- In para "During it's deveâ€¦" there is an unlinked figure reference.

/ When you abandoned the initial design, how did you know the separation between the user and the diagram was too great?

/ avoid similar-but-slightly-different

/ You need to make each software revision explicit - each transition should have its own subsection.
